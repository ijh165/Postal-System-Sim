package com.ijh165.postalsystem.frontend;

import com.ijh165.postalsystem.backend.PostalSystemBackend;
import com.ijh165.postalsystem.util.CmdTypeStr;
import com.ijh165.postalsystem.util.Logging;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author IvanJonathan
 */
public class PostalSystemFrontend extends javax.swing.JFrame {

    /**
     * Creates new form PostalSystemGUI
     */
    public PostalSystemFrontend() {
        super();
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PostalSystemFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PostalSystemFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PostalSystemFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PostalSystemFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //basic initialization
        initComponents();
        //init variables
        pageStack = new Stack<>();
        lastDir = null;
        //display main menu
        displayPage(Page.MAIN_MENU_PAGE, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        northPanel = new javax.swing.JPanel();
        pageTitle = new javax.swing.JLabel();
        southPanel = new javax.swing.JPanel();
        copyrightLabel = new javax.swing.JLabel();
        eastPanel = new javax.swing.JPanel();
        westPanel = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        mainMenuPage = new javax.swing.JPanel();
        mainMenuCmdFileButtonPanel = new javax.swing.JPanel();
        createCommandFileButton = new javax.swing.JButton();
        editCommandFileButton = new javax.swing.JButton();
        mainMenuOfficeFileButtonPanel = new javax.swing.JPanel();
        createOfficeFileButton = new javax.swing.JButton();
        editOfficeFileButton = new javax.swing.JButton();
        mainMenuWantedFileButton = new javax.swing.JPanel();
        createWantedFileButton = new javax.swing.JButton();
        editWantedFileButton = new javax.swing.JButton();
        runSimulationPanel = new javax.swing.JPanel();
        runSimulationButton = new javax.swing.JButton();
        inputDirPathTextField = new javax.swing.JTextField();
        outputDirPathTextField = new javax.swing.JTextField();
        inputDirPathLabel = new javax.swing.JLabel();
        outputDirPathLabel = new javax.swing.JLabel();
        inputDirPathBrowseButton = new javax.swing.JButton();
        outputDirPathBrowseButton = new javax.swing.JButton();
        fileEditorPage = new javax.swing.JPanel();
        filenameLabel = new javax.swing.JLabel();
        fileContentScroll = new javax.swing.JScrollPane();
        fileContentList = new javax.swing.JList<>();
        moveLabel = new javax.swing.JLabel();
        addModifyDeleteButtonPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        modifyButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        addEditDeleteLabel = new javax.swing.JLabel();
        movementButtonPanel = new javax.swing.JPanel();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        saveCancelLabel = new javax.swing.JLabel();
        saveCancelButtonPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Postal System Simulation");

        pageTitle.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        pageTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pageTitle.setText("Title");
        pageTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout northPanelLayout = new javax.swing.GroupLayout(northPanel);
        northPanel.setLayout(northPanelLayout);
        northPanelLayout.setHorizontalGroup(
            northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, northPanelLayout.createSequentialGroup()
                .addContainerGap(166, Short.MAX_VALUE)
                .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(167, Short.MAX_VALUE))
        );
        northPanelLayout.setVerticalGroup(
            northPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, northPanelLayout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(pageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        getContentPane().add(northPanel, java.awt.BorderLayout.PAGE_START);

        copyrightLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        copyrightLabel.setText("Copyright (c) 2016 Ivan Jonathan Hoo. All rights reserved.");

        javax.swing.GroupLayout southPanelLayout = new javax.swing.GroupLayout(southPanel);
        southPanel.setLayout(southPanelLayout);
        southPanelLayout.setHorizontalGroup(
            southPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, southPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(copyrightLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1100, Short.MAX_VALUE)
                .addContainerGap())
        );
        southPanelLayout.setVerticalGroup(
            southPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(southPanelLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(copyrightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        getContentPane().add(southPanel, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout eastPanelLayout = new javax.swing.GroupLayout(eastPanel);
        eastPanel.setLayout(eastPanelLayout);
        eastPanelLayout.setHorizontalGroup(
            eastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        eastPanelLayout.setVerticalGroup(
            eastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 607, Short.MAX_VALUE)
        );

        getContentPane().add(eastPanel, java.awt.BorderLayout.LINE_END);

        javax.swing.GroupLayout westPanelLayout = new javax.swing.GroupLayout(westPanel);
        westPanel.setLayout(westPanelLayout);
        westPanelLayout.setHorizontalGroup(
            westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        westPanelLayout.setVerticalGroup(
            westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 607, Short.MAX_VALUE)
        );

        getContentPane().add(westPanel, java.awt.BorderLayout.LINE_START);

        mainPanel.setLayout(new java.awt.CardLayout());

        mainMenuCmdFileButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "commands.txt", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 14))); // NOI18N

        createCommandFileButton.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        createCommandFileButton.setText("Create New Command File");
        createCommandFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCommandFileButtonActionPerformed(evt);
            }
        });

        editCommandFileButton.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        editCommandFileButton.setText("Edit Existing Command File");
        editCommandFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCommandFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainMenuCmdFileButtonPanelLayout = new javax.swing.GroupLayout(mainMenuCmdFileButtonPanel);
        mainMenuCmdFileButtonPanel.setLayout(mainMenuCmdFileButtonPanelLayout);
        mainMenuCmdFileButtonPanelLayout.setHorizontalGroup(
            mainMenuCmdFileButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(createCommandFileButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(editCommandFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainMenuCmdFileButtonPanelLayout.setVerticalGroup(
            mainMenuCmdFileButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainMenuCmdFileButtonPanelLayout.createSequentialGroup()
                .addComponent(createCommandFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editCommandFileButton))
        );

        mainMenuOfficeFileButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "offices.txt", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 14))); // NOI18N

        createOfficeFileButton.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        createOfficeFileButton.setText("Create New Post Office File");
        createOfficeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOfficeFileButtonActionPerformed(evt);
            }
        });

        editOfficeFileButton.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        editOfficeFileButton.setText("Edit Existing Post Office File");
        editOfficeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOfficeFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainMenuOfficeFileButtonPanelLayout = new javax.swing.GroupLayout(mainMenuOfficeFileButtonPanel);
        mainMenuOfficeFileButtonPanel.setLayout(mainMenuOfficeFileButtonPanelLayout);
        mainMenuOfficeFileButtonPanelLayout.setHorizontalGroup(
            mainMenuOfficeFileButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(createOfficeFileButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(editOfficeFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainMenuOfficeFileButtonPanelLayout.setVerticalGroup(
            mainMenuOfficeFileButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainMenuOfficeFileButtonPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(createOfficeFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editOfficeFileButton)
                .addContainerGap())
        );

        mainMenuWantedFileButton.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "wanted.txt", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 14))); // NOI18N

        createWantedFileButton.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        createWantedFileButton.setText("Create New Wanted Criminals File");
        createWantedFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createWantedFileButtonActionPerformed(evt);
            }
        });

        editWantedFileButton.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        editWantedFileButton.setText("Edit Existing Wanted Criminals File");
        editWantedFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editWantedFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainMenuWantedFileButtonLayout = new javax.swing.GroupLayout(mainMenuWantedFileButton);
        mainMenuWantedFileButton.setLayout(mainMenuWantedFileButtonLayout);
        mainMenuWantedFileButtonLayout.setHorizontalGroup(
            mainMenuWantedFileButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(createWantedFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(editWantedFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
        );
        mainMenuWantedFileButtonLayout.setVerticalGroup(
            mainMenuWantedFileButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuWantedFileButtonLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(createWantedFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editWantedFileButton))
        );

        runSimulationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Simulation Execution", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 14))); // NOI18N

        runSimulationButton.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        runSimulationButton.setText("Run Simulation");
        runSimulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runSimulationButtonActionPerformed(evt);
            }
        });

        inputDirPathLabel.setText("Input Directory Path:");

        outputDirPathLabel.setText("Output Directory Path:");

        inputDirPathBrowseButton.setText("Browse");
        inputDirPathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputDirPathBrowseButtonActionPerformed(evt);
            }
        });

        outputDirPathBrowseButton.setText("Browse");
        outputDirPathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputDirPathBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout runSimulationPanelLayout = new javax.swing.GroupLayout(runSimulationPanel);
        runSimulationPanel.setLayout(runSimulationPanelLayout);
        runSimulationPanelLayout.setHorizontalGroup(
            runSimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, runSimulationPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(runSimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(runSimulationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(runSimulationPanelLayout.createSequentialGroup()
                        .addGroup(runSimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inputDirPathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(outputDirPathLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(runSimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputDirPathTextField)
                            .addComponent(outputDirPathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(runSimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputDirPathBrowseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputDirPathBrowseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, 0))
        );
        runSimulationPanelLayout.setVerticalGroup(
            runSimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runSimulationPanelLayout.createSequentialGroup()
                .addGroup(runSimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputDirPathBrowseButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, runSimulationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(inputDirPathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(inputDirPathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(runSimulationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(outputDirPathLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputDirPathTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(outputDirPathBrowseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runSimulationButton, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout mainMenuPageLayout = new javax.swing.GroupLayout(mainMenuPage);
        mainMenuPage.setLayout(mainMenuPageLayout);
        mainMenuPageLayout.setHorizontalGroup(
            mainMenuPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPageLayout.createSequentialGroup()
                .addContainerGap(94, Short.MAX_VALUE)
                .addGroup(mainMenuPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(runSimulationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainMenuWantedFileButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainMenuCmdFileButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainMenuOfficeFileButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        mainMenuPageLayout.setVerticalGroup(
            mainMenuPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPageLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainMenuCmdFileButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mainMenuOfficeFileButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mainMenuWantedFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(runSimulationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(mainMenuPage, "Main Menu Page");

        fileEditorPage.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        filenameLabel.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        filenameLabel.setText("filename or file path");
        filenameLabel.setBorder(null);

        fileContentList.setModel(new DefaultListModel());
        fileContentScroll.setViewportView(fileContentList);

        moveLabel.setText(" Move items");

        addModifyDeleteButtonPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        modifyButton.setText("Modify");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addModifyDeleteButtonPanelLayout = new javax.swing.GroupLayout(addModifyDeleteButtonPanel);
        addModifyDeleteButtonPanel.setLayout(addModifyDeleteButtonPanelLayout);
        addModifyDeleteButtonPanelLayout.setHorizontalGroup(
            addModifyDeleteButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
            .addComponent(modifyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        addModifyDeleteButtonPanelLayout.setVerticalGroup(
            addModifyDeleteButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addModifyDeleteButtonPanelLayout.createSequentialGroup()
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modifyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton))
        );

        addEditDeleteLabel.setText(" Add/Modify/Delete items");

        movementButtonPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        moveUpButton.setText("Move Up");
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });

        moveDownButton.setText("Move Down");
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout movementButtonPanelLayout = new javax.swing.GroupLayout(movementButtonPanel);
        movementButtonPanel.setLayout(movementButtonPanelLayout);
        movementButtonPanelLayout.setHorizontalGroup(
            movementButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(moveUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(moveDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
        );
        movementButtonPanelLayout.setVerticalGroup(
            movementButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movementButtonPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(moveUpButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveDownButton))
        );

        saveCancelLabel.setText(" Save/Cancel");

        saveCancelButtonPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout saveCancelButtonPanelLayout = new javax.swing.GroupLayout(saveCancelButtonPanel);
        saveCancelButtonPanel.setLayout(saveCancelButtonPanelLayout);
        saveCancelButtonPanelLayout.setHorizontalGroup(
            saveCancelButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        saveCancelButtonPanelLayout.setVerticalGroup(
            saveCancelButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveCancelButtonPanelLayout.createSequentialGroup()
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton))
        );

        javax.swing.GroupLayout fileEditorPageLayout = new javax.swing.GroupLayout(fileEditorPage);
        fileEditorPage.setLayout(fileEditorPageLayout);
        fileEditorPageLayout.setHorizontalGroup(
            fileEditorPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileEditorPageLayout.createSequentialGroup()
                .addGroup(fileEditorPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileContentScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE)
                    .addGroup(fileEditorPageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(filenameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileEditorPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addModifyDeleteButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(movementButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveCancelButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveCancelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addEditDeleteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        fileEditorPageLayout.setVerticalGroup(
            fileEditorPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileEditorPageLayout.createSequentialGroup()
                .addGroup(fileEditorPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileEditorPageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addEditDeleteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fileEditorPageLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(filenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0)
                .addGroup(fileEditorPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileEditorPageLayout.createSequentialGroup()
                        .addComponent(addModifyDeleteButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(moveLabel)
                        .addGap(0, 0, 0)
                        .addComponent(movementButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveCancelLabel)
                        .addGap(0, 0, 0)
                        .addComponent(saveCancelButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(fileContentScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)))
        );

        mainPanel.add(fileEditorPage, "File Editor Page");

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void createCommandFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCommandFileButtonActionPerformed
        displayPage(Page.CREATE_CMD_FILE_PAGE, true);
    }//GEN-LAST:event_createCommandFileButtonActionPerformed

    private void editCommandFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCommandFileButtonActionPerformed
        JFileChooser fc = new JFileChooser( new File(".") ) {
            @Override
            public void approveSelection() {
                //make sure proper filename
                if (!getSelectedFile().getName().equals("commands.txt")) {
                    JOptionPane.showMessageDialog(this, "Please select a file of the name \"commands.txt\"!",
                                                  "Invalid file!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                //validate command file
                List<String> checkedFileLines = parseFile(getSelectedFile().getAbsolutePath());
                if (!validateFile(checkedFileLines)) {
                    JOptionPane.showMessageDialog(this,
                                                  "The selected file is not a proper command file (even though the filename is correct)!\n" +
                                                  "Make sure the file content doesn't violate the requirements of a command file!\n",
                                                  "Invalid file!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                super.approveSelection();
            }
            
            private boolean validateFile(List<String> fileLines) {
                Pattern p = Pattern.compile("[^0-9]");
                if (fileLines.isEmpty() || p.matcher(fileLines.get(0)).find() || Integer.parseInt(fileLines.get(0))!=fileLines.size()-1) {
                    return false;
                }
                for(int i=1; i<fileLines.size(); i++) {
                    String fileLine = fileLines.get(i);
                    if(!validateFileLine(fileLine)) {
                        return false;
                    }
                }
                return true;
            }
            
            private boolean validateFileLine(String fileLine) {
                Pattern nonAlphabeticPattern = Pattern.compile("[^a-zA-Z]");
                Pattern nonNumericPattern = Pattern.compile("[^0-9]");
                String[] tokens = fileLine.split("\\s");
                //check depending on which cmd (or if invalid cmd)
                if (fileLine.startsWith(CmdTypeStr.PICKUP_CMD)) {
                    //validate num of fields
                    if (tokens.length != 3) {
                        return false;
                    }
                    //validate data types inside each field
                    String dest = tokens[1];
                    String recipient = tokens[2];
                    if (nonAlphabeticPattern.matcher(dest).find() || 
                        nonAlphabeticPattern.matcher(recipient).find())
                    {
                        return false;
                    }

                } else if (fileLine.startsWith(CmdTypeStr.LETTER_CMD)) {
                    //validate num of fields
                    if (tokens.length != 5) {
                        return false;
                    }
                    //validate data types inside each field
                    String src = tokens[1];
                    String recipient = tokens[2];
                    String dest = tokens[3];
                    String returnRecipient = tokens[4];
                    if (nonAlphabeticPattern.matcher(src).find() || 
                        nonAlphabeticPattern.matcher(recipient).find() ||
                        nonAlphabeticPattern.matcher(dest).find() ||
                        nonAlphabeticPattern.matcher(returnRecipient).find() )
                    {
                        return false;
                    }
                    
                } else if (fileLine.startsWith(CmdTypeStr.PACKAGE_CMD)) {
                    //validate num of fields
                    if (tokens.length != 6) {
                        return false;
                    }
                    //validate data types inside each field
                    String src = tokens[1];
                    String recipient = tokens[2];
                    String dest = tokens[3];
                    String money = tokens[4]; //integer
                    String length = tokens[5]; //integer
                    if (nonAlphabeticPattern.matcher(src).find() || 
                        nonAlphabeticPattern.matcher(recipient).find() ||
                        nonAlphabeticPattern.matcher(dest).find() ||
                        nonNumericPattern.matcher(money).find() ||
                        nonNumericPattern.matcher(length).find() )
                    {
                        return false;
                    }
                    
                } else if (fileLine.startsWith(CmdTypeStr.BUILD_CMD)) {
                    //validate num of fields
                    if (tokens.length != 7) {
                        return false;
                    }
                    //validate data types inside each field
                    String officeName = tokens[1];
                    String transitTime = tokens[2]; //integer
                    String requiredPostage = tokens[3]; //integer
                    String capacity = tokens[4]; //integer
                    String persuasionAmmount = tokens[5]; //integer
                    String maxPackageLength = tokens[6]; //integer
                    if (nonAlphabeticPattern.matcher(officeName).find() || 
                        nonNumericPattern.matcher(transitTime).find() ||
                        nonNumericPattern.matcher(requiredPostage).find() ||
                        nonNumericPattern.matcher(capacity).find() ||
                        nonNumericPattern.matcher(persuasionAmmount).find() ||
                        nonNumericPattern.matcher(maxPackageLength).find())
                    {
                        return false;
                    }

                } else if (fileLine.startsWith(CmdTypeStr.SCIENCE_CMD)) {
                    //validate num of fields
                    if (tokens.length != 2) {
                        return false;
                    }
                    //validate data types inside each field
                    String timeTravelVal = tokens[1]; //integer (allow negatives)
                    if (nonNumericPattern.matcher(timeTravelVal).find() && 
                        timeTravelVal.charAt(0)!='-') {
                        return false;
                    }

                } else if (fileLine.startsWith(CmdTypeStr.DELAY_CMD)) {
                    //validate num of fields
                    if (tokens.length != 3) {
                        return false;
                    }
                    //validate data types inside each field
                    String delayedRecipient = tokens[1];
                    String daysDelayed = tokens[2]; //integer
                    if (nonAlphabeticPattern.matcher(delayedRecipient).find() || 
                        nonNumericPattern.matcher(daysDelayed).find())
                    {
                        return false;
                    }
                } else if (!fileLine.equals(CmdTypeStr.DAY_CMD) &&
                           !fileLine.equals(CmdTypeStr.GOOD_CMD) &&
                           !fileLine.equals(CmdTypeStr.SNEAK_CMD) &&
                           !fileLine.equals(CmdTypeStr.INFLATION_CMD) &&
                           !fileLine.equals(CmdTypeStr.DEFLATION_CMD))
                {
                    return false;
                }
                //no error
                return true;
            }
        };
        
        //setup file chooser dialog
        fc.setPreferredSize(new Dimension(800,600));
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setDialogTitle("Select Command File");
        fc.setFileFilter(new FileNameExtensionFilter("Text File (*.txt)", "txt"));
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        //show dialog
        if (fc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            //update lastDir
            lastDir = fc.getCurrentDirectory().getAbsolutePath();
            //switch to edit command page
            displayPage(Page.EDIT_CMD_FILE_PAGE, true);
            //fill in fileContentList
            DefaultListModel model = (DefaultListModel) fileContentList.getModel();
            model.clear();
            List<String> lines = parseFile(fc.getSelectedFile().getAbsolutePath());
            for (String line : lines) {
                model.addElement(line);
            }
        }
    }//GEN-LAST:event_editCommandFileButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        //determine which file
        String item = null;
        switch(pageStack.peek()) {
            case CREATE_CMD_FILE_PAGE:
            case EDIT_CMD_FILE_PAGE:
                //commands.txt
                item = ProcessUserInteraction.commandInteraction(this, null);
                break;
            case CREATE_OFFICE_FILE_PAGE:
            case EDIT_OFFICE_FILE_PAGE:
                //offices.txt
                item = ProcessUserInteraction.officeInteraction(this, null);
                break;
            case CREATE_WANTED_FILE_PAGE:
            case EDIT_WANTED_FILE_PAGE:
                //wanted.txt
                item = ProcessUserInteraction.wantedInteraction(this, null);
                break;
            default:
                //invalid
                System.out.println("something wrong with add button");
                return;
        }
        //add item to fileContentList
        if (item!=null) {
            DefaultListModel model = (DefaultListModel) fileContentList.getModel();
            model.addElement(item);
            model.setElementAt(Integer.toString(model.size()-1), 0);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        //user should select an item
        if (fileContentList.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(this, "Please select an item.", "No item selected!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //disallow selecting multiple items
        if (fileContentList.getMinSelectionIndex()!=fileContentList.getMaxSelectionIndex()) {
            JOptionPane.showMessageDialog(this, "Please select only one item.", "Multiple items selected!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //disallow modifying first line
        if (fileContentList.getSelectedIndex()==0) {
            JOptionPane.showMessageDialog(this, "The first line is the count of items in the file.\n" +
                                          "The program will automatically change this number if the user add/delete any item(s).\n", 
                                          "Cannot modify the first line!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //determine which file
        String item = null;
        switch(pageStack.peek()) {
            case CREATE_CMD_FILE_PAGE:
            case EDIT_CMD_FILE_PAGE:
                //commands.txt
                item = ProcessUserInteraction.commandInteraction(this, fileContentList.getSelectedValue());
                break;
            case CREATE_OFFICE_FILE_PAGE:
            case EDIT_OFFICE_FILE_PAGE:
                //offices.txt
                item = ProcessUserInteraction.officeInteraction(this, fileContentList.getSelectedValue());
                break;
            case CREATE_WANTED_FILE_PAGE:
            case EDIT_WANTED_FILE_PAGE:
                //wanted.txt
                item = ProcessUserInteraction.wantedInteraction(this, fileContentList.getSelectedValue());
                break;
            default:
                //invalid
                System.out.println("something wrong with modify button");
                return;
        }
        if (item!=null) {
            DefaultListModel model = (DefaultListModel) fileContentList.getModel();
            model.setElementAt(item, fileContentList.getSelectedIndex());
            model.setElementAt(Integer.toString(model.size()-1), 0);
        }
    }//GEN-LAST:event_modifyButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        //user should select an item
        if (fileContentList.getMinSelectionIndex()==-1) {
            JOptionPane.showMessageDialog(this, "Please select an item.", "No item selected!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //disallow deleting first line
        if (fileContentList.getMinSelectionIndex()==0) {
            JOptionPane.showMessageDialog(this, "The first line is the count of items in the file.\n" +
                                          "The program will automatically change this number if the user add/delete any item(s).\n", 
                                          "Cannot delete the first line!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //ask for user confirmation
        int rv = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected item(s)?", "Deleting item(s)...", 
                                                           JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (rv == JOptionPane.NO_OPTION) {
            return;
        }
        //delete selected lines
        DefaultListModel model = (DefaultListModel) fileContentList.getModel();
        int[] selectedIndices = fileContentList.getSelectedIndices();
        for (int i = selectedIndices.length-1; i >=0; i--) {
            model.removeElementAt(selectedIndices[i]);
        }
        //update first line
        model.setElementAt(Integer.toString(model.size()-1), 0);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        //determine expected filename
        String expectedFilename = null, errorMessage = null;
        switch(pageStack.peek()) {
            case CREATE_CMD_FILE_PAGE:
            case EDIT_CMD_FILE_PAGE :
                expectedFilename = "commands.txt";
                errorMessage = "The command file must be of the name \"commands.txt\"!";
                break;
            case CREATE_OFFICE_FILE_PAGE:
            case EDIT_OFFICE_FILE_PAGE :
                expectedFilename = "offices.txt";
                errorMessage = "The post office file must be of the name \"offices.txt\"!";
                break;
            case CREATE_WANTED_FILE_PAGE:
            case EDIT_WANTED_FILE_PAGE :
                expectedFilename = "wanted.txt";
                errorMessage = "The wanted criminals file must be of the name \"wanted.txt\"!";
                break;
            default:
                //invalid
                System.out.println("something wrong with save button action");
                return;
        }
        //create file chooser gui
        final String finalExpectedFilename = expectedFilename, finalErrorMessage = errorMessage;
        JFileChooser fc = new JFileChooser( new File(".") ) {
            @Override
            public void approveSelection() {
                //user must select the file with expected file name and if user select an existing file
                if (!getSelectedFile().getName().equals(finalExpectedFilename)) {
                    JOptionPane.showMessageDialog(this, finalErrorMessage,
                                                  "Invalid filename!", JOptionPane.ERROR_MESSAGE);
                }
                else if (getSelectedFile().exists()) {
                    int rv = JOptionPane.showConfirmDialog(this, "Do you want to overwrite file?", getSelectedFile().getName() + " exists!", 
                                                           JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (rv == JOptionPane.YES_OPTION) {
                        super.approveSelection();
                    }
                }
                else {
                    super.approveSelection();
                }
            }
        };
        //setup file chooser dialog
        fc.setPreferredSize(new Dimension(800,600));
        fc.setCurrentDirectory(new File( (lastDir!=null) ? lastDir : System.getProperty("user.dir") ));
        fc.setDialogTitle("Save File");
        fc.setFileFilter(new FileNameExtensionFilter("Text File (*.txt)", "txt"));
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //show dialog and determine if user click save or cancel
        if (fc.showSaveDialog(this)==JFileChooser.APPROVE_OPTION) {
            //try saving the file
            try {
                PrintWriter pw = new PrintWriter(fc.getSelectedFile().getAbsolutePath(), "UTF-8");
                ListModel model = fileContentList.getModel();
                for (int i=0; i < model.getSize(); i++){
                    pw.println(model.getElementAt(i));
                }
                pw.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
            //go back to main menu
            prevPage();
            //show message dialog to inform user
            JOptionPane.showMessageDialog(this, 
                                          "\"" + expectedFilename + "\" saved in the following directory:\n" + 
                                          "<html><font color=red>" + fc.getCurrentDirectory().getAbsolutePath() + "</font></html>\n",
                                          "Save Successful.",
                                          JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        //ask for user confirmation
        int rv = JOptionPane.showConfirmDialog(this, "Are you sure you want to cancel? All your progress will be lost.", "Cancelling...", 
                                                           JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (rv == JOptionPane.NO_OPTION) {
            return;
        }
        //go back to main menu
        prevPage();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        //user should select an item
        if (fileContentList.getMinSelectionIndex()==-1) {
            JOptionPane.showMessageDialog(this, "Please select an item.", "No item selected!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //disallow selecting multiple items
        if (fileContentList.getMinSelectionIndex()!=fileContentList.getMaxSelectionIndex()) {
            JOptionPane.showMessageDialog(this, "Please select only one item.", "Multiple items selected!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //disallow moving first line
        if (fileContentList.getMinSelectionIndex()==0) {
            JOptionPane.showMessageDialog(this, "The first line is the count of items in the file.\n" +
                                          "The program will automatically change this number if the user add/delete any item(s).\n", 
                                          "Cannot move the first line!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //disallow moving if at second line
        if (fileContentList.getMaxSelectionIndex()==1) {
            JOptionPane.showMessageDialog(this, "Item selected is at the second line and the first line is immovable.",
                                          "Cannot move up!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //move up...
        int indexOfSelected = fileContentList.getSelectedIndex();
        swapFileContentListElements(indexOfSelected, indexOfSelected - 1);
        indexOfSelected = indexOfSelected - 1;
        fileContentList.setSelectedIndex(indexOfSelected );
        fileContentList.updateUI();
    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        //user should select an item
        if (fileContentList.getMinSelectionIndex()==-1) {
            JOptionPane.showMessageDialog(this, "Please select an item.", "No item selected!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //disallow selecting multiple items
        if (fileContentList.getMinSelectionIndex()!=fileContentList.getMaxSelectionIndex()) {
            JOptionPane.showMessageDialog(this, "Please select only one item.", "Multiple items selected!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //disallow moving first line
        if (fileContentList.getMinSelectionIndex()==0) {
            JOptionPane.showMessageDialog(this, "The first line is the count of items in the file.\n" +
                                          "The program will automatically change this number if the user add/delete any item(s).\n", 
                                          "Cannot move the first line!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //disallow moving if at last line
        if (fileContentList.getMaxSelectionIndex()==fileContentList.getModel().getSize()-1) {
            JOptionPane.showMessageDialog(this, "Item selected is at the last line.",
                                          "Cannot move down!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //move down...
        int indexOfSelected = fileContentList.getSelectedIndex();
        swapFileContentListElements(indexOfSelected, indexOfSelected + 1);
        indexOfSelected = indexOfSelected + 1;
        fileContentList.setSelectedIndex(indexOfSelected );
        fileContentList.updateUI();
    }//GEN-LAST:event_moveDownButtonActionPerformed

    private void createOfficeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOfficeFileButtonActionPerformed
        displayPage(Page.CREATE_OFFICE_FILE_PAGE, true);
    }//GEN-LAST:event_createOfficeFileButtonActionPerformed

    private void editOfficeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOfficeFileButtonActionPerformed
        JFileChooser fc = new JFileChooser( new File(".") ) {
            @Override
            public void approveSelection() {
                //make sure proper filename
                if (!getSelectedFile().getName().equals("offices.txt")) {
                    JOptionPane.showMessageDialog(this, "Please select a file of the name \"offices.txt\"!",
                                                  "Invalid file!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                //validate command file
                List<String> checkedFileLines = parseFile(getSelectedFile().getAbsolutePath());
                if (!validateFile(checkedFileLines)) {
                    JOptionPane.showMessageDialog(this,
                                                  "The selected file is not a proper post office file (even though the filename is correct)!\n" +
                                                  "Make sure the file content doesn't violate the requirements of a post office file!\n",
                                                  "Invalid file!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                super.approveSelection();
            }
            
            private boolean validateFile(List<String> fileLines) {
                Pattern p = Pattern.compile("[^0-9]");
                if (fileLines.isEmpty() || p.matcher(fileLines.get(0)).find() || Integer.parseInt(fileLines.get(0))!=fileLines.size()-1) {
                    return false;
                }
                for(int i=1; i<fileLines.size(); i++) {
                    String fileLine = fileLines.get(i);
                    if(!validateFileLine(fileLine)) {
                        return false;
                    }
                }
                return true;
            }
            
            private boolean validateFileLine(String fileLine) {
                Pattern nonAlphabeticPattern = Pattern.compile("[^a-zA-Z]");
                Pattern nonNumericPattern = Pattern.compile("[^0-9]");
                String[] tokens = fileLine.split("\\s");
                //validate num of fields
                if (tokens.length != 6) {
                    return false;
                }
                //validate data types inside each field
                String officeName = tokens[0];
                String transitTime = tokens[1]; //integer
                String requiredPostage = tokens[2]; //integer
                String capacity = tokens[3]; //integer
                String persuasionAmmount = tokens[4]; //integer
                String maxPackageLength = tokens[5]; //integer
                if (nonAlphabeticPattern.matcher(officeName).find() || 
                    nonNumericPattern.matcher(transitTime).find() ||
                    nonNumericPattern.matcher(requiredPostage).find() ||
                    nonNumericPattern.matcher(capacity).find() ||
                    nonNumericPattern.matcher(persuasionAmmount).find() ||
                    nonNumericPattern.matcher(maxPackageLength).find())
                {
                    return false;
                }
                //no error
                return true;
            }
        };
        
        //setup file chooser dialog
        fc.setPreferredSize(new Dimension(800,600));
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setDialogTitle("Select Office File");
        fc.setFileFilter(new FileNameExtensionFilter("Text File (*.txt)", "txt"));
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        //show dialog
        if (fc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            //update lastDir
            lastDir = fc.getCurrentDirectory().getAbsolutePath();
            //switch to edit command page
            displayPage(Page.EDIT_OFFICE_FILE_PAGE, true);
            //fill in fileContentList
            DefaultListModel model = (DefaultListModel) fileContentList.getModel();
            model.clear();
            List<String> lines = parseFile(fc.getSelectedFile().getAbsolutePath());
            for (String line : lines) {
                model.addElement(line);
            }
        }
    }//GEN-LAST:event_editOfficeFileButtonActionPerformed

    private void createWantedFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createWantedFileButtonActionPerformed
        displayPage(Page.CREATE_WANTED_FILE_PAGE, true);
    }//GEN-LAST:event_createWantedFileButtonActionPerformed

    private void editWantedFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editWantedFileButtonActionPerformed
        JFileChooser fc = new JFileChooser( new File(".") ) {
            @Override
            public void approveSelection() {
                //make sure proper filename
                if (!getSelectedFile().getName().equals("wanted.txt")) {
                    JOptionPane.showMessageDialog(this, "Please select a file of the name \"wanted.txt\"!",
                                                  "Invalid file!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                //validate command file
                List<String> checkedFileLines = parseFile(getSelectedFile().getAbsolutePath());
                if (!validateFile(checkedFileLines)) {
                    JOptionPane.showMessageDialog(this,
                                                  "The selected file is not a proper wanted criminals file (even though the filename is correct)!\n" +
                                                  "Make sure the file content doesn't violate the requirements of a wanted criminals file!\n",
                                                  "Invalid file!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                super.approveSelection();
            }
            
            private boolean validateFile(List<String> fileLines) {
                Pattern nonAlphabeticPattern = Pattern.compile("[^a-zA-Z]");
                Pattern nonNumericPattern = Pattern.compile("[^0-9]");
                if (fileLines.isEmpty() || nonNumericPattern.matcher(fileLines.get(0)).find() || Integer.parseInt(fileLines.get(0))!=fileLines.size()-1) {
                    return false;
                }
                for(int i=1; i<fileLines.size(); i++) {
                    String fileLine = fileLines.get(i);
                    if(fileLine.matches("\\s") || nonAlphabeticPattern.matcher(fileLine).find()) {
                        return false;
                    }
                }
                return true;
            }
        };
        
        //setup file chooser dialog
        fc.setPreferredSize(new Dimension(800,600));
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setDialogTitle("Select Wanted Criminals File");
        fc.setFileFilter(new FileNameExtensionFilter("Text File (*.txt)", "txt"));
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        //show dialog
        if (fc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            //update lastDir
            lastDir = fc.getCurrentDirectory().getAbsolutePath();
            //switch to edit command page
            displayPage(Page.EDIT_WANTED_FILE_PAGE, true);
            //fill in fileContentList
            DefaultListModel model = (DefaultListModel) fileContentList.getModel();
            model.clear();
            List<String> lines = parseFile(fc.getSelectedFile().getAbsolutePath());
            for (String line : lines) {
                model.addElement(line);
            }
        }
    }//GEN-LAST:event_editWantedFileButtonActionPerformed

    private void runSimulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runSimulationButtonActionPerformed
        //fetch input and out dir paths
        String inputDirPath = inputDirPathTextField.getText();
        String outputDirPath = outputDirPathTextField.getText();
        //if user doesn't fill them in
        if(inputDirPath.length()==0 || outputDirPath.length()==0) {
            JOptionPane.showMessageDialog(this,
                                          "Please fill in both " +
                                          "\"" + inputDirPathLabel.getText().substring(0, inputDirPathLabel.getText().length()-1) + "\" and " +
                                          "\"" + outputDirPathLabel.getText().substring(0, outputDirPathLabel.getText().length()-1) + "\" " +
                                          "fields to run the simulation",
                                          "Fail to run simulation!",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        //try running the simulation
        try {
            PostalSystemBackend.runSimulation(inputDirPath, outputDirPath);
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this,
                                          "Input file(s) not found!\n"+
                                          "Please make sure the files \"commands.txt\", \"offices.txt\", and \"wanted.txt\" " + 
                                          "are in the following input directory:\n" + 
                                          "<html><font color=red>" + inputDirPathTextField.getText() + "</font></html>",
                                          "Fail to run simulation!",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        } catch (UnsupportedEncodingException e) {
            JOptionPane.showMessageDialog(this,
                                          "UTF-8 encoding not supported!",
                                          "Fail to run simulation!",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                                          e.getMessage(),
                                          "Fail to run simulation!",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        } finally {
            Logging.cleanUp();
        }
        
        JOptionPane.showMessageDialog(this,
                                          "Execution Successful.\n" +
                                          "Output files are created in the following directory:\n" +
                                          "<html><font color=red>" + outputDirPathTextField.getText() + "</font></html>",
                                          "Simulation Success!",
                                          JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_runSimulationButtonActionPerformed

    private void inputDirPathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputDirPathBrowseButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        //setup file chooser dialog
        fc.setPreferredSize(new Dimension(800,600));
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setDialogTitle("Select Input Directory");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //show dialog
        if (fc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            inputDirPathTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_inputDirPathBrowseButtonActionPerformed

    private void outputDirPathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputDirPathBrowseButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        //setup file chooser dialog
        fc.setPreferredSize(new Dimension(800,600));
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fc.setDialogTitle("Select Output Directory");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //show dialog
        if (fc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            outputDirPathTextField.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_outputDirPathBrowseButtonActionPerformed
    
    //swap two elements in the fileContentList at the specified indices
    private void swapFileContentListElements(int index1, int index2) {
        DefaultListModel model = (DefaultListModel) fileContentList.getModel();
        String tmp = (String) model.get(index1);
        model.set(index1, model.get(index2));
        model.set(index2, tmp);
    }
    
    //display desired page...
    private void displayPage(Page targetPage, boolean saveToPageStack) {
        //go to desired page...
        switch(targetPage) {
            case MAIN_MENU_PAGE:
                //appearance...
                ((CardLayout)mainPanel.getLayout()).show(mainPanel, "Main Menu Page");
                pageTitle.setText("Main Menu");
                //init fileContentList
                DefaultListModel model = (DefaultListModel) fileContentList.getModel();
                model.clear();
                model.addElement("0");
                //init lastDir
                lastDir = null;
                //print page (for debugging)
                //System.out.println("MAIN_MENU_PAGE");
                break;
            case CREATE_CMD_FILE_PAGE:
                //appearance...
                ((CardLayout)mainPanel.getLayout()).show(mainPanel, "File Editor Page");
                pageTitle.setText("Creating Command File");
                filenameLabel.setText("commands.txt");
                //print page (for debugging)
                //System.out.println("CREATE_CMD_FILE_PAGE");
                break;
            case EDIT_CMD_FILE_PAGE:
                //appearance...
                ((CardLayout)mainPanel.getLayout()).show(mainPanel, "File Editor Page");
                pageTitle.setText("Editing Command File");
                filenameLabel.setText( (lastDir!=null?lastDir:System.getProperty("user.dir")) + File.separator + "commands.txt" );
                //print page (for debugging)
                //System.out.println("EDIT_CMD_FILE_PAGE");
                break;
            case CREATE_OFFICE_FILE_PAGE:
                //appearance...
                ((CardLayout)mainPanel.getLayout()).show(mainPanel, "File Editor Page");
                pageTitle.setText("Creating Post Office File");
                filenameLabel.setText("offices.txt");
                //print page (for debugging)
                //System.out.println("CREATE_OFFICE_FILE_PAGE");
                break;
            case EDIT_OFFICE_FILE_PAGE:
                //appearance...
                ((CardLayout)mainPanel.getLayout()).show(mainPanel, "File Editor Page");
                pageTitle.setText("Editing Post Office File");
                filenameLabel.setText( (lastDir!=null?lastDir:System.getProperty("user.dir")) + File.separator + "offices.txt" );
                //print page (for debugging)
                //System.out.println("EDIT_OFFICE_FILE_PAGE");
                break;
            case CREATE_WANTED_FILE_PAGE:
                //appearance...
                ((CardLayout)mainPanel.getLayout()).show(mainPanel, "File Editor Page");
                pageTitle.setText("Creating Wanted Criminals File");
                filenameLabel.setText("wanted.txt");
                //print page (for debugging)
                //System.out.println("CREATE_WANTED_FILE_PAGE");
                break;
            case EDIT_WANTED_FILE_PAGE:
                //appearance...
                ((CardLayout)mainPanel.getLayout()).show(mainPanel, "File Editor Page");
                pageTitle.setText("Editing Wanted Criminals File");
                filenameLabel.setText( (lastDir!=null?lastDir:System.getProperty("user.dir")) + File.separator + "wanted.txt" );
                //print page (for debugging)
                //System.out.println("EDIT_WANTED_FILE_PAGE");
                break;
        }
        //determine saving page enum to pageStack
        if(saveToPageStack) {
            pageStack.push(targetPage);
        }
    }
    
    //go back to previous page
    private void prevPage() {
        pageStack.pop();
        displayPage(pageStack.peek(), false);
    }
    
    //parse file into lines
    private List<String> parseFile(String path) {
        List<String> lines = new ArrayList<>();
        try {
            File file = new File(path);
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                lines.add(line);
            }
            fileReader.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return lines;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel addEditDeleteLabel;
    private javax.swing.JPanel addModifyDeleteButtonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel copyrightLabel;
    private javax.swing.JButton createCommandFileButton;
    private javax.swing.JButton createOfficeFileButton;
    private javax.swing.JButton createWantedFileButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel eastPanel;
    private javax.swing.JButton editCommandFileButton;
    private javax.swing.JButton editOfficeFileButton;
    private javax.swing.JButton editWantedFileButton;
    private javax.swing.JList<String> fileContentList;
    private javax.swing.JScrollPane fileContentScroll;
    private javax.swing.JPanel fileEditorPage;
    private javax.swing.JLabel filenameLabel;
    private javax.swing.JButton inputDirPathBrowseButton;
    private javax.swing.JLabel inputDirPathLabel;
    private javax.swing.JTextField inputDirPathTextField;
    private javax.swing.JPanel mainMenuCmdFileButtonPanel;
    private javax.swing.JPanel mainMenuOfficeFileButtonPanel;
    private javax.swing.JPanel mainMenuPage;
    private javax.swing.JPanel mainMenuWantedFileButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton modifyButton;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JLabel moveLabel;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JPanel movementButtonPanel;
    private javax.swing.JPanel northPanel;
    private javax.swing.JButton outputDirPathBrowseButton;
    private javax.swing.JLabel outputDirPathLabel;
    private javax.swing.JTextField outputDirPathTextField;
    private javax.swing.JLabel pageTitle;
    private javax.swing.JButton runSimulationButton;
    private javax.swing.JPanel runSimulationPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel saveCancelButtonPanel;
    private javax.swing.JLabel saveCancelLabel;
    private javax.swing.JPanel southPanel;
    private javax.swing.JPanel westPanel;
    // End of variables declaration//GEN-END:variables
    
    private final Stack<Page> pageStack;
    
    private String lastDir;
    
    private enum Page {
        MAIN_MENU_PAGE,
        CREATE_CMD_FILE_PAGE,
        EDIT_CMD_FILE_PAGE,
        CREATE_OFFICE_FILE_PAGE,
        EDIT_OFFICE_FILE_PAGE,
        CREATE_WANTED_FILE_PAGE,
        EDIT_WANTED_FILE_PAGE
    }
}
